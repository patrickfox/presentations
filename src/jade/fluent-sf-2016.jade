extends partials/master.jade

prepend head
	title Improving Single Page App Accessibility

block main
	a-slide(data-state='title')
		h1 Improving Single Page App Accessibility
		p Patrick Fox, Technology Director @Razorfish, Austin, TX
		a(href='http://www.twitter.com/patrickfox' target='twitter') @patrickfox

	a-slide(data-state='intro' id='overview')
		h2 Overview
	a-slide(data-hid='overview')
		ul
			li Modern Web UI Challenges
			li Single-Page Applications
			li Improving SPA UX
			li Live Region Best Practices
			li Implementation Examples

	a-slide(data-state='intro', id='challenges')
		h2 Modern Web UI Challenges

	a-slide(data-hid='challenges')
		h3 Dynamic UI
		p Content and states change without a page refresh
		ul
			li Custom drop down Menus
			li Modal dialogs
			li Tooltips
			li Tabbed and accordion content
			li Dynamic errors, notifications


	a-slide(data-hid='challenges')
		h3 Dynamic UI
		p Assistive technology (AT) doesn't recognize dynamic UI changes
		ul
			li Native HTML, JavaScript can't communicate DOM updates
			li AT is geared towards static documents

	a-slide(data-hid='challenges')
		h3 ARIA bridges the gap
		p ARIA provides missing semantics and info
		ul
			li States and Properties - #[code aria-disabled="true"], #[code aria-required="true"]
			li Relationships - #[code aria-labelledby="{idref}"]
			li Roles - #[code role="nav|header|footer|menu"]
			li Live region - #[code aria-live="polite|assertive"]

	a-slide(data-state='intro', id='spas')
		h2 Single-Page Applications

	a-slide(data-hid='spas')
		h3 The promise: Improved UX
		ul
			li Content updated dynamically w/o page refresh
			li Refresh only what has changed
			li Improved responsiveness, efficiency

	a-slide(data-hid='spas')
		h3 The reality: broken accessibility
		ul
			li Screen readers don't recognize dynamically updated content
			li View change can lose user's focus
			li Standards are vague on handling dynamic content

	a-slide(data-state='intro', id='improving_spaux')
		h2 Improving SPA UX

	a-slide(data-hid='improving_spaux')
		h3 Best Practice: Emulate native browser page-load behavior
		ul
			li Page title is used to announce page load/refresh
			li Stating that page/view is "loaded" is helpful
		a(href='https://moderna11y.firebaseapp.com/#/blog/screen-reader-page-load-behaviors.html' target='pageload') Page load behaviors

	a-slide(data-hid='improving_spaux')
		h3 Recommended Approach
		ul
			li Update page #[code &lt;title&gt;]
			li Announce page/view change (unobtrusively)
			li Manage focus

	a-slide(data-hid='improving_spaux')
		h3 Update Title
		ul
			li Significant UI/context change requires a title change
			li #[code &lt;title&gt;] plays an important role in orientation
			li Frameworks don't automate title updates ?

	a-slide(data-hid='improving_spaux')
		h3 Announce view change
		ul
			li Live regions are great for announcing content unobtrusively
			li Create a message: #[code {page_title} + " loaded"]
			li Update live region &rarr; message is spoken by screen reader

	a-slide(data-state='intro', id='best_practices')
		h2 Live Region Best Practices

	a-slide(data-hid='best_practices')
		h3 Live region caveats
		ul
			li Multiple live regions add complexity, unpredicatability
			li Live region roles unpredicatable (#[code role="log|status|alert|"])

	a-slide(data-hid='best_practices' data-state='one-ring')
		h3 One live region to rule them all...
		ul
			li Provide common mechanism to "announce" content
			li Use a single, global "announcer" live region
			li Use a script - #[code $.announce()] - to make updates
		a(href="https://jsfiddle.net/pfox/ou11fr9p/show/light/" target="github") $.announce in action
		a(href="https://github.com/patrickfox/a11y_kit" target="github") Check out $.announce() and a11y_kit on Github

	a-slide(data-hid='best_practices' data-state='responsibility')
		h3 With great power...
		p Use this technique judiciously
		ul
			li Use to communicate pertinent information only
			li Keep messages succinct
			li Use cases:
				ul
					li View updates in single-page apps
					li Form validation errors
					li Alert messages (non-modal)
					li Progress updates in multi-step process

	a-slide(data-state='intro', id='implementation')
		h2 Implementation Examples

	a-slide(data-hid='implementation')
		h3 Single-Page Application Lifecycle
		ol
			li User action
			li Some stuff happens...
			li View rendered &rarr; announce loaded status
		p Create a helper function: #[code announce_view_loaded();]
		p Most SPA's have a "view loaded" event of some sort

	a-slide(data-hid='implementation')
		h3 Announce Helper Function
		p #[code announce_view_loaded();] does the following:
		ol
			li Grab new title from view's #[code h2[data-page-title]]
			li Create "loaded" message
			li Update page title 
			li Call #[code announce(message, 'assertive')]

	a-slide(data-hid='implementation')
		h3(class="angular") Angular
		ul
			li Subscribe to #[code $viewContentLoaded] event in controller
		img(src="/img/spa-angular-code.png" alt="Angular code example using the $viewContentLoaded event")
		a(href="https://moderna11y.firebaseapp.com/" target="angular") Angular Example
		a(href="https://docs.angularjs.org/api/ngRoute/directive/ngView" target="angular") Angular's ngView directive

	a-slide(data-hid='implementation')
		h3(class="angular2") Angular 2
		ul
			li Provides #[code ngAfterViewInit()] method
		a(href="#" target="angular") Angular 2 Example

	a-slide(data-hid='implementation')
		h3(class="react") React
		ul
			li Components
			li Use #[code componentDidUpdate] - only called on updates after initial render
		img(src="/img/spa-react-code.png" alt="React code example using componentDidUpdate")
		a(href="#" target="react") React Example
		a(href="https://facebook.github.io/react/docs/component-specs.html" target="react-lifecycle") React lifecycle


	a-slide(data-hid='implementation')
		h3(class="ember") Ember 2.x
		ul
			li As of 2.x, Views are deprecated in favor of Components
			li Use Ember.Route's #[code renderTemplate()] and Ember's Run Loop #[code afterRender] queue
		img(src="/img/spa-ember-code.png" alt="Ember code example using afterRender queue")
		a(href="#" target="ember") Ember Example
		a(href="http://emberjs.com/api/classes/Ember.run.html#method_scheduleOnce" target="ember-run") Run Loop and Ember.run
		

	//- a-slide(data-hid='implementation')
	//- 	h3(class="riot") RiotJS
	//- 	ul
	//- 		li
	//- 	a(href="#" target="angular") RiotJS Example

	a-slide(data-state='intro' id='questions')
		h2 Questions

	a-slide(data-state='intro' id='thanks')
		h2 Thanks!
		a(href="https://twitter.com/patrickfox" target="twitter") This deck: spa-a11y.firebaseapp.com
		a(href="https://twitter.com/patrickfox" target="twitter") @patrickfox



